#1
import numpy as np  #модуль, предоставляющий общие математические и числовые операции быстрых функций
a = [[1, 2, 3],
     [4, 5, 6],
     [7, 8, 9]]

def trahsposed(x):
    matrix = np.transpose(x) #функция для транспонирования
    return matrix

print(trahsposed(a))

#2
a = [('Тимка', 2, 'Михаил', 'Викторов'), ('Снежок', 4, 'Тимофей', 'Ельцин'),
 ('Пятнышко', 5, 'Вася', 'Пупкин'), ('Солнышко', 4, 'Вася', 'Пупкин')]


def optimization(pets): #принимаем список кортежей

    owners = {} #словарь с информацией

    for pet in pets:
        name_pet, age_pet, owner_name, owner_surname = pet  #разделяем кортеж на отдельные значения
        owner = (owner_name, owner_surname) #объединяем имя и фамилию владельца в один кортеж
        if owner not in owners: #если кортежа нет в словаре,
            owners[owner] = [] #добавляем пустой список с ключом owner
        owners[owner].append((name_pet, age_pet)) #добавляем данные животного в список значений словаря
    return owners
print(optimization(a))

#3


#4


#5

def is_palindrome(s):
    if len(s) < 1: #если строка больше единицы
        return True #тогда тру
    else:
        if s[0] == s[-1]: #в противном случае проверяем равенство первого и последнего элементов строки
            return is_palindrome(s[1:-1]) #если равны, то вызываем функцию с помощью среза
        else:
            return False
a = str(input("Введите строку:")) #вводим строку
if (is_palindrome(a) == True):
    print("Данная строка палиндром!")
else:
    print("Данная строка не палиндром!")
    
#6
a = [1, 7, 3, 7, 3, 1]
def sort(x):

    count = {} #словарь для хранения частоты каждого элемента

    for elem in x: #проходим по каждому элементу массива
        if elem in count:  #проверяем, если элемент уже есть в словаре
            count[elem] += 1 #тогда увеличиваем частоту
        else:
            count[elem] = 1 #если элемента нет, тогда добавляем в словарь

    res = sorted(x, key=lambda y: (-count[y], x.index(y)))  #функция, возвращающая кортеж из двух значений. Элементы с более высокой частотой окажутся первыми
    #два элемента, имеющие одинаковую частоту будут отсортированы в порядке появления

    return res
print (sort(a))

#7
a = 'красная шапочка нашла 5 грибов, а бабушка 7 '

def three_words(x):
    words = x.split() #разделяем строку
    for i in range(2, len(words)): #начинаем поиск с 3 элемента
        if all(word.isalpha() for word in words[i-2:i+1]): #проверяем, являются ли предыдущие три элемента словами
            return True #если являются, тогда возвращаем true
    return False #в ином случае false 
print(three_words(a))

#8

#9
a = '2+2*2'
def answer (x):
    result = eval(x)  #эта функция анализирует аргумент,  дает решение
    return result
print(answer(a))

#10
def Key(list):
    d = {} #список словарей
    for e in list:
        for key in e.keys(): #проверяем ключи
            if key in d: #если ключь есть в словаре
                d[key] += e[key] #тогда используем сумму значений
            else:
                d[key] = e[key] #в ином случе добавляем
    return d


values = [{'кот': 5, 'собака': 8, 'попугай': 6, 'заяц': 3}, {'змея': 5, 'кот': 10},
              {'собака': 10, 'змея': 7}]
print(Key(values))
